#41. First Missing Positive
Solved
Hard
Given an unsorted integer array nums. Return the smallest positive integer that is not present in nums.
You must implement an algorithm that runs in O(n) time and uses O(1) auxiliary space.

Example 1:
Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.\

#CODE

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
   

   int n = nums.size();
    
    // 1. mark numbers (num < 0) and (num > n) with a special marker number (n+1) 
    // (we can ignore those because if all number are > n then we'll simply return 1)
    for (int i = 0; i < n; i++) {
        if (nums[i] <= 0 || nums[i] > n) {
            nums[i] = n + 1;
        }
    }
    // note: all number in the array are now positive, and on the range 1..n+1
    
    // 2. mark each cell appearing in the array, by converting the index for that number to negative
    for (int i = 0; i < n; i++) {
        int num = abs(nums[i]);
        if (num > n) {
            continue;
        }
        num--; // -1 for zero index based array (so the number 1 will be at pos 0)
        if (nums[num] > 0) { // prevents double negative operations
            nums[num] = -1 * nums[num];
        }
    }
    
    // 3. find the first cell which isn't negative (doesn't appear in the array)
    for (int i = 0; i < n; i++) {
        if (nums[i] >= 0) {
            return i + 1;
        }
    }
    
    // 4. no positive numbers were found, which means the array contains all numbers 1..n
    return n + 1;

   
   
   
   
   
    //     int n= nums.size();
    //     int ans = 1;
       
    //     sort(nums.begin(),nums.end());
       
    //    if(nums[n-1]<n){
    //     ans = n;
    //    }


    //     for(int i = 0 ;i < n ;i++){
    //         cout<< "ans1 = " << ans <<endl;
    //           if(nums[0] != 1 && nums[0] >0){
    //         ans = 1;
    //     }
    //         else if(nums[i] > 0 && i != nums[i]  )
    //         {
    //               cout<< "ans2 = " << ans << endl;
    //             ans = i ;
    //             break;
    //             }
    //        // ans = n;
    //     }

    //   return ans;
         
        
    }
};
